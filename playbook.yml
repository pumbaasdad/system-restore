- hosts: all
  pre_tasks:
    - name: Include secrets
      include_vars: "{{ path }}"
      vars:
        params:
          files: "{{ secrets_files }}"
          paths: secrets
          skip: true
        path: "{{ lookup('first_found', params) }}"

    - name: Load secrets
      set_fact:
        secrets: "{{ secrets_dictionary }}"
        network: "{{ secret_network.network }}"

    - name: Set become password
      set_fact:
        ansible_become_password: "{{ network_hosts[inventory_hostname].become_password }}"

    - name: Load network configuration
      set_fact:
        network: "{{ secret_network.network }}"

    - name: Find local python interpreter
      local_action: command which python
      register: which_python
      changed_when: false

    - name: Install local python prerequisites
      vars:
        ansible_python_interpreter: "{{ which_python.stdout }}"
      local_action:
        module: pip
        name: "{{ local_pip_modules }}"
        state: latest

    - name: As root
      become: yes
      block:
        - name: Create groups
          group:
            name: "{{ item }}"
            state: present
          loop: "{{ user_group_names }}"

        - name: Add users to groups
          user:
            name: "{{ item.1 }}"
            groups: "{{ item.0 }}"
            append: yes
          loop: "{{ unique_user_group_mappings }}"

        - name: Add apt keys
          apt_key:
            url: "{{ item.url }}"
          with_items: "{{ apt_keys }}"

        - name: Add PPAs
          apt_repository:
            repo: "ppa:{{ item.ppa }}"
            codename: "{{ item.codename | default(ansible_distribution_release) }}"
          with_items: "{{ apt_ppas }}"

        - name: Add deb repos
          apt_repository:
            repo: "deb [arch=amd64] {{ item.url }} {{ item.codename | default(ansible_distribution_release) }} {{ item.channel | default('stable') }}"
          with_items: "{{ deb_repos }}"

        - name: Install packages
          apt:
            name: "{{ packages }}"
            state: present
            update_cache: true

        - name: Upgrade packages
          apt:
            upgrade: "yes"

        - name: Disable services
          service:
            name: "{{ item }}"
            enabled: no
          loop: "{{ disabled_services }}"

        - name: Create root directories
          file:
            path: "{{ item.path }}"
            state: directory
            owner: "{{ item.owner | default(omit) }}"
            group: "{{ item.group | default(omit) }}"
          loop: "{{ root_directories }}"

        - name: Install root configuration files
          template:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            force: "{{ item.force | default(omit) }}"
            owner: "{{ item.owner | default(omit) }}"
            group: "{{ item.group | default(omit) }}"
            mode: "{{ item.mode | default(omit) }}"
          loop: "{{ root_files }}"
          loop_control:
            label: "{{ item.label | default(item) }}"
          register: changed_root_files
          notify: "{{ item.notify | default(omit) }}"

        - import_role:
            name: udev
          vars:
            udev_devices: "{{ all_udev_devices }}"

        - import_role:
            name: iptables
          vars:
            iptables_rules: "{{ iptable_rules }}"

    - name: Install python modules
      pip:
        name: "{{ pip_modules | selectattr('environment', 'equalto', item) | map(attribute='modules') | flatten | unique }}"
        state: latest
        virtualenv: "{{ item }}"
      loop: "{{ virtual_environments }}"

    - name: Create directories
      file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ item.owner | default(omit) }}"
        group: "{{ item.group | default(omit) }}"
      loop: "{{ directories }}"

    - name: Install configuration files
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: "{{ item.force | default(omit) }}"
        owner: "{{ item.owner | default(omit) }}"
        group: "{{ item.group | default(omit) }}"
        mode: "{{ item.mode | default(omit) }}"
      loop: "{{ files }}"
      loop_control:
        label: "{{ item.label | default(item) }}"
      register: changed_files
      notify: "{{ item.notify | default(omit) }}"

    - import_role:
        name: fail2ban
      vars:
        fail2ban_jails: "{{ intrusion_jails }}"
        fail2ban_filters: "{{ intrusion_filters }}"

    - import_role:
        name: reverse-proxy
      vars:
        reverse_proxy_public_site_configs: "{{ public_site_configs }}"
        reverse_proxy_private_site_configs: "{{ private_site_configs }}"

    - import_role:
        name: home-automation
      vars:
        home_automation_trusted_proxies: "{{ trusted_proxy_ips }}"

  roles:
    - security
    - shell
    - backup
    - certificates
    - ddns
    - dhcp
    - role: dns
      vars:
        dns_server: "{{ network_hosts[inventory_hostname].name }}"
        dns_zone: "{{ network_hosts[inventory_hostname].zone }}"
    - media-rip
    - media-server
    - transcode
    - unifi
    - zwave
    - role: docker
      vars:
        docker_local_volumes: "{{ local_docker_volumes }}"
        docker_nas_volumes: "{{ nas_docker_volumes }}"
        docker_services: "{{ all_docker_services }}"
        docker_services_with_config: "{{ all_docker_services_with_config }}"

  post_tasks:
    - name: As root
      become: yes
      block:
        - name: Start services on boot
          service:
            name: "{{ item }}"
            enabled: true
            state: started
          with_items: "{{ services }}"

        - name: Remove unused packages
          apt:
            autoremove: yes
