external_zone: "{{ network | json_query('zones[?hosts[*].external] | [0]') }}"
external_host: "{{ external_zone | json_query('hosts[?external] | [0]') }}"
external_ip: "{{ external_zone.ipv4_subnet | ansible.utils.ipaddr(external_host.ipv4_offset) | ansible.utils.ipaddr('address') }}"
internal_zone: "{{ network | json_query('zones[?hosts[*].internal] | [0]') }}"
internal_host: "{{ internal_zone | json_query('hosts[?internal] | [0]') }}"
internal_ip: "{{ internal_zone.ipv4_subnet | ansible.utils.ipaddr(internal_host.ipv4_offset) | ansible.utils.ipaddr('address') }}"

docker_role:
  deb_repo:
    url: "https://download.docker.com/linux/ubuntu"
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
  packages:
    - apt-transport-https
    - ca-certificates
    - curl
    - git
    - software-properties-common
    - docker-ce
  service: docker
  pip_modules:
    environment: "{{ docker_virtual_env }}"
    modules:
    - docker
    - docker-compose
  groups:
    - name: docker
      users:
        - "{{ ansible_env.USER }}"
  root_files:
    - src: roles/docker/templates/daemon.json.j2
      dest: /etc/docker/daemon.json
      notify:
        - Restart docker daemon
        - Stop docker containers
  files:
    - src: roles/docker/templates/docker-compose.yml.j2
      dest: "{{ docker_compose_dir }}/docker-compose.yml"

local_docker_role:
  pip_modules:
    - jmespath

docker_builtin_networks:
  - name: docker1
  - name: private0
    subnet: "{{ docker_private0_subnet }}"
