      version: "3.7"
      services:
        duckdns:
          image: linuxserver/duckdns
          container_name: duckdns
          environment:
            - TZ={{ TZ }}
            - SUBDOMAINS={{ duckdns_subdomain }}
            - TOKEN={{ duckdns_token }}
          networks:
            - docker1
          restart: unless-stopped
        homeassistant:
          container_name: hass
          image: ghcr.io/home-assistant/home-assistant
          volumes:
            - hass-config:/config
            - hass-db:/db
          environment:
            - TZ={{ TZ }}
          networks:
            - docker2
            - private0
          restart: unless-stopped
        letsencrypt:
          container_name: letsencrypt 
          image: linuxserver/swag
          volumes:
            - letsencrypt-config:/config
            - public-nginx-log:/config/log/nginx-public
            - {{ hass_dir }}/home-assistant.log:/config/log/hass/home-assistant.log
            - fail2ban-jails:/etc/fail2ban/jail.d
          ports:
            - {{ internal_ip }}:80:80
          environment:
            - EMAIL={{ letsencrypt_email }}
            - SUBDOMAINS=wildcard
            - URL={{ letsencrypt_url }}
            - VALIDATION=duckdns
            - DUCKDNSTOKEN={{ duckdns_token }}
            - TZ={{ TZ }}
            - DHLEVEL=2048
            - PUID=1000
            - PGID=999
          networks:
            - docker1 
            - private0
          cap_add:
            - NET_ADMIN
          restart: unless-stopped
        public-nginx:
          container_name: public-nginx
          image: linuxserver/nginx
          volumes:
            - letsencrypt-config:/config
            - public-nginx-config:/config/nginx
            - public-nginx-log:/config/log/nginx
          ports:
            - {{ external_ip }}:{{ public_port }}:443
            - {{ external_ip }}:80:80
          environment:
            - TZ={{ TZ }}
            - DHLEVEL=2048
            - PUID=1000
            - PGID=999
          networks:
            public0:
            private0:
              ipv4_address: {{ reverse_proxy_private0_ipv4_address }}
          restart: unless-stopped
        volumerize:
          container_name: volumerize
          image: fekide/volumerize
          volumes:
            - volumerize-cache:/volumerize-cache
            - volumerize-credentials:/credentials
            - hass-config:/source/hass:ro
            - letsencrypt-etc:/source/letsencrypt/etc:ro
            - unifi-backup:/source/unifi-backup
            - zwave-config:/source/zwave-config
            - /var/run/docker.sock:/var/run/docker.sock
          environment:
            - VOLUMERIZE_SOURCE=/source
            - VOLUMERIZE_TARGET=gdocs://{{ volumerize_email }}/{{ volumerize_google_drive_dir }}
            - VOLUMERIZE_EXCLUDE_1=**/*.log*
            - PASSPHRASE={{ volumerize_passphrase }}
            - TZ={{ TZ }}
            - VOLUMERIZE_JOBBER_TIME=0 30 0 * * 1
            - VOLUMERIZE_CONTAINERS=zwavejs2mqtt hass letsencrypt unifi
            - VOLUMERIZE_FULL_IF_OLDER_THAN=1M
            - REMOVE_ALL_BUT_N_FULL=4
            - REMOVE_ALL_INC_BUT_N_FULL=1
          networks:
            - docker1
          restart: unless-stopped
        unifi:
          image: linuxserver/unifi-controller
          container_name: unifi
          environment:
            - PUID=1000
            - PGID=999
          volumes:
            - unifi:/config
          ports:
            - 3478:3478/udp
            - 10001:10001/udp
            - 8080:8080
            - 8081:8081
            - 8443:8443
            - 8843:8843
            - 8880:8880
            - 6789:6789
          networks:
            - docker1
          restart: unless-stopped
        plex:
          image: linuxserver/plex
          container_name: plex
          environment:
            - PUID=1000
            - PGID=999
            - VERSION=docker
          volumes:
            - plex_config:/config
            - media:/media
          ports:
            - 32400:32400
            - 32400:32400/udp
            - 32469:32469
            - 32469:32469/udp
            - 1900:1900/udp
            - 3005:3005
            - 8324:8324
            - 32410:32410/udp
            - 32411:32411/udp
            - 32412:32412/udp
            - 32413:32413/udp
            - 32414:32414/udp
          networks:
            - docker1
          restart: unless-stopped
        dhcp:
          image: networkboot/dhcpd
          container_name: dhcp
          volumes:
            - dhcp:/data
          networks:
            dhcp0:
              ipv4_address: "{{ dhcp_docker_ip }}"
          restart: unless-stopped
        dhcp-relay:
          image: pumbaasdad/dhcp-helper
          container_name: dhcp-relay
          network_mode: host
          cap_add:
            - NET_ADMIN
          command: -s {{ dhcp_docker_ip }}
          restart: unless-stopped
        makemkv:
          image: jlesage/makemkv
          container_name: makemkv
          ports:
            - 5801:5800
          environment:
            - USER_ID=1000
            - GROUP_ID=999
            - TZ={{ TZ }}
            - KEEP_APP_RUNNING={{ media_rip_keep_app_running }}
            - AUTO_DISC_RIPPER=1
          volumes:
            - media_rip_destination:/output
            - {{ media_rip_config_dir }}:/config
          networks:
            - docker1
          devices:
            - "{{ ('/dev/' + media_rip_block_device_symlink) | realpath }}:{{ ('/dev/' + media_rip_block_device_symlink) | realpath }}"
            - "{{ ('/dev/' + media_rip_scsi_generic_device_symlink) | realpath }}:{{ ('/dev/' + media_rip_scsi_generic_device_symlink) | realpath }}"
          restart: unless-stopped
        handbrake:
          image: jlesage/handbrake
          container_name: handbrake
          ports:
            - 5800:5800
          environment:
            - USER_ID=1000
            - GROUP_ID=999
            - TZ={{ TZ }}
            - KEEP_APP_RUNNING={{ transcode_keep_app_running }}
            - AUTOMATED_CONVERSION_PRESET={{ transcode_preset }}
            - AUTOMATED_CONVERSION_KEEP_SOURCE={{ transcode_keep_source_file }}
            - AUTOMATED_CONVERSION_OUTPUT_SUBDIR={{ transcode_output_subdir }}
            - AUTOMATED_CONVERSION_SOURCE_STABLE_TIME={{ transcode_input_stability_seconds }}
            - AUTOMATED_CONVERSION_CHECK_INTERVAL={{ transcode_input_check_seconds }}
          volumes:
            - {{ transcode_dir }}:/config
            - media_rip_destination:/watch
            - transcode_destination:/output
          networks:
            - docker1
          restart: unless-stopped
        dns:
          image: resystit/bind9
          container_name: bind9
          ports:
            - "53:53"
            - "53:53/udp"
          volumes:
            - {{ dns_config_dir }}:/etc/bind
            - {{ dns_cache_dir }}:/var/cache/bind
          networks:
            - docker1
          restart: unless-stopped
        zwavejs2mqtt:
          image: zwavejs/zwavejs2mqtt:latest
          container_name: zwavejs2mqtt
          ports:
            - "8091:8091"
            - "3000:3000"
          volumes:
            - zwave-config:/usr/src/app/store
          environment:
            - SESSION_SECRET={{ zwave_session_secret }}
            - KEY_S0_Legacy={{ zwave_s0_legacy_key }}
            - KEY_S2_Unauthenticated={{ zwave_s2_unauthenticated_key }}
            - KEY_S2_Authenticated={{ zwave_s2_authenticated_key }}
            - KEY_S2_AccessControl={{ zwave_s2_access_control_key }}
            - TZ={{ TZ }}
          networks:
            - docker2
          devices:
            - /dev/{{ zwave_usbstick_symlink }}:/dev/zwave
          tty: true
          stop_signal: SIGINT
          restart: unless-stopped

      networks:
{% for network in (docker_builtin_networks + docker_extra_networks) %}
        {{ network.name }}:
          driver: bridge
          driver_opts:
            com.docker.network.bridge.name: {{ network.name }}
{% if 'subnet' in network %}
          ipam:
            driver: default
            config:
              - subnet: "{{ network.subnet }}"
{% endif %}
{% endfor %}

      volumes:
{% for directory in docker_local_volumes %}
        {{ directory.volume }}:
          driver: local
          driver_opts:
            device: {{ directory.path }}
            o: bind
            type: none
{% endfor %}
{% for directory in docker_nas_volumes %}
        {{ directory.volume }}:
          driver: local
          driver_opts:
            device: ":{{ directory.path }}"
            o: addr={{ nas_address }},rw
            type: nfs
{% endfor %}

