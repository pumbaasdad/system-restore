- name: Create dns config directory
  file:
    path: "{{ dns_config_dir }}"
    state: directory

- name: Create dns cache directory
  file:
    path: "{{ dns_cache_dir }}"
    state: directory
    owner: "{{ dns_user }}"
    group: "{{ dns_group }}"

- name: Disable systemd-resolved
  service:
    name: systemd-resolved
    enabled: no

- name: Calculate reverse zones
  vars:
    ipv4_network_as_list: "{{ (network.ipv4_subnet | ipaddr('network')).split('.') }}"
    ipv4_required_bytes: "{{ (network.ipv4_subnet | ipaddr('prefix') | int) // 8 }}"
    ipv6_network_as_list: "{{ (network.ipv6_subnet | ipaddr('network')).split(':') | reject('eq', '') | list }}"
    ipv6_network_as_filled_list: "{{ ipv6_network_as_list + ['0000', '0000', '0000', '0000'] }}"
    ipv6_network_as_formatted_list: "{{ ipv6_network_as_filled_list |
            map('regex_replace', '^(.)$', '0\\1') |
            map('regex_replace', '^(..)$', '0\\1') |
            map('regex_replace', '^(...)$', '0\\1') |
            join }}"
    ipv6_required_bytes: "{{ (network.ipv6_subnet | ipaddr('prefix') | int) // 4 }}"
  set_fact:
    reverse_ipv4_zone: "{{ ipv4_network_as_list[:(ipv4_required_bytes | int)] | reverse | list | join('.') }}"
    reverse_ipv6_zone: "{{ ipv6_network_as_formatted_list[:(ipv6_required_bytes | int)] | reverse | list | join('.') }}"

- name: Install prerequsites
  local_action:
    module: pip
    name:
      - dnspython
      - netaddr
      - jinja2

- name: Find DNS key files
  find:
    paths: "{{ dns_config_dir }}"
    patterns: K{{ network.domain }}.{{ network.suffix }}.+157+*.{{ item }}
  register: existing_dns_key_files
  with_items:
    - private
    - key
  changed_when: false

- block:
    - name: Delete old DNS key files
      file:
        state: absent
        path: "{{ item }}"
      with_items: "{{ existing_dns_key_files.results | map(attribute='files') | sum(start=[]) | map(attribute='path') | list }}"

    - name: Generate keys for DDNS
      shell: dnssec-keygen -a HMAC-MD5 -b 128 -r /dev/urandom -n USER {{ resolve_search }}
      register: dnssec_keygen
      args:
        chdir: "{{ dns_config_dir }}"
  when: existing_dns_key_files.results | map(attribute='matched') | list != [1, 1]

- name: Get DDNS private key
  shell: "grep 'Key: ' {{ dns_config_dir }}/K{{ network.domain }}.{{ network.suffix }}.+157+*.private | awk '{ print $2 }'"
  register: ddns_private_key
  changed_when: false

- name: Get DDNS public key
  shell: "cat {{ dns_config_dir }}/K{{ network.domain }}.{{ network.suffix }}.+157+*.key | awk '{ print $7 }'"
  register: ddns_public_key
  changed_when: false

- name: Update ddns.key
  template:
    src: ddns.key.j2
    dest: "{{ dns_config_dir }}/ddns.key"
    owner: "{{ dns_user }}"
    group: "{{ dns_group }}"
    mode: 0644
  register: ddns_key

- name: Install default files
  copy:
    src: "{{ item }}"
    dest: "{{ dns_config_dir }}"
    force: no
    owner: "{{ dns_user }}"
    group: "{{ dns_group }}"
    mode: 0644
  with_items:
    - bind.keys
    - db.0
    - db.127
    - db.255
    - db.empty
    - db.local
    - db.root
    - named.conf
    - named.conf.default-zones
  register: dns_default_files

- name: Update named.conf.local
  template:
    src: named.conf.local.j2
    dest: "{{ dns_config_dir }}/named.conf.local"
    owner: "{{ dns_user }}"
    group: "{{ dns_group }}"
    mode: 0644
  register: named_conf_local

- name: Install named.conf.options
  template:
    src: named.conf.options.j2
    dest: "{{ dns_config_dir }}/named.conf.options"
    owner: "{{ dns_user }}"
    group: "{{ dns_group }}"
    mode: 0644
  register: named_conf_options

- name: Install {{ network.domain }}.{{ network.suffix }} databases
  template:
    src: db.j2
    dest: "{{ dns_cache_dir }}/db.{{ item }}.{{ network.domain }}.{{ network.suffix }}"
    owner: "{{ dns_user }}"
    group: "{{ dns_group }}"
    mode: 0644
    force: no
  with_items: "{{ zone_names }}"
  register: dns_sub_zone_databases

- name: Install zone databases
  template:
    src: db.j2
    dest: "{{ dns_cache_dir }}/db.{{ item }}"
    owner: "{{ dns_user }}"
    group: "{{ dns_group }}"
    mode: 0644
    force: no
  with_items:
    - "{{ network.domain }}.{{ network.suffix }}"
    - "{{ reverse_ipv4_zone }}"
    - "{{ reverse_ipv6_zone }}"
  register: dns_zone_databases

- name: Delete old zones
  file:
    state: absent
    path: "{{ item }}"
  with_fileglob:
    - "{{ dns_cache_dir }}/db*"
  when: item.split('.')[1] not in zone_names and
        item != dns_cache_dir + '/db.' + reverse_ipv4_zone and
        item != dns_cache_dir + '/db.' + reverse_ipv6_zone and
        item != dns_cache_dir + '/db.' + network.domain + '.' + network.suffix and
        (item | splitext)[1] != '.jnl'

- name: Calculate DNS records
  template:
    src: dns.j2
    dest: "{{ dns_config_dir }}/records.txt"
  notify: Update DNS records

- import_role:
    name: ahuffman.resolv
  vars:
    resolv_nameservers:
      - "{{ hostvars[inventory_hostname].ansible_default_ipv4.macaddress |
            regex_replace(mac_regex, '::\\1X\\2:\\3ff:fe\\4:\\5\\6') |
            regex_replace('X', mac_to_ipv6_interface_bit_flipper[
              hostvars[inventory_hostname].ansible_default_ipv4.macaddress | regex_replace('.(.).*', '\\1') | int(base=16)
            ]) }}"
      - 127.0.0.1
      - "{{ dns_forwarders | ipv4 | first }}"
    resolv_search:
      - "{{ network.domain }}.{{ network.suffix }}"
