{%- macro append_records_for_host(records, zone, host, interface_type, offset, forward_origin, forward_host, reverse_ipv4_origin, link_local_ipv6_origin, dns_root_domain) -%}
    {%- set ipv4_address = zone.ipv4_subnet | ansible.utils.ipaddr(host.ipv4_offset + offset) | ansible.utils.ipaddr('address') -%}
    {%- set _ = records.append({'origin': forward_origin, 'host': forward_host, 'type': 'A', 'target_host': ipv4_address, 'target_zone': ''}) -%}

    {%- if 'ipv6_interface' in host[interface_type] -%}
        {%- set ipv6_address = ((zone.ipv6_prefix | ansible.utils.ipaddr('network')) + host[interface_type].ipv6_interface) -%}
        {%- if ipv6_address | ansible.utils.ipaddr('address') -%}
            {%- set _ = records.append({'origin': forward_origin, 'host': forward_host, 'type': 'AAAA', 'target_host': ipv6_address, 'target_zone': ''}) -%}
        {%- endif -%}
    {%- else -%}
        {%- set ipv6_address = 'fe80::' | ansible.utils.slaac(host[interface_type].mac) -%}
        {%- set _ = records.append({'origin': forward_origin, 'host': forward_host, 'type': 'AAAA', 'target_host': ipv6_address, 'target_zone': ''}) -%}
        {%- set _ = records.append({'origin': link_local_ipv6_origin, 'host': (ipv6_address | ansible.utils.ipaddr('revdns'))[:31], 'type': 'PTR', 'target_host': forward_host, 'target_zone': forward_origin + '.' + dns_root_domain + '.' + link_local_ipv6_origin + '.'}) -%}
    {%- endif -%}

    {%- set _ = records.append({'origin': reverse_ipv4_origin, 'host': host.ipv4_offset, 'type': 'PTR', 'target_host': forward_host, 'target_zone': forward_origin + '.' +  dns_root_domain + '.' + reverse_ipv4_origin + '.'}) -%}
{%- endmacro %}

{%- macro append_records_for_aliases(records, host, dns_zone, dns_root_domain) -%}
    {%- for alias in host.aliases | default([]) -%}
        {%- set _ = records.append({'origin': dns_root_domain, 'host': alias, 'type': 'CNAME', 'target_host': host.name, 'target_zone': dns_zone}) -%}
    {%- endfor -%}
{%- endmacro -%}

{%- macro append_records_for_host_origin_aliases(records, zone, host, forward_host, dns_root_domain) -%}
    {%- for alias in host.aliases | default([]) -%}
        {%- set _ = records.append({'origin': alias + '.' + dns_root_domain, 'host': forward_host, 'type': 'CNAME', 'target_host': forward_host + '.' + host.name, 'target_zone': zone.name + '.' + dns_root_domain + '.'}) -%}
    {%- endfor -%}
{%- endmacro -%}

{%- macro append_ethernet_records(records, zone, host, reverse_ipv4_origin, link_local_ipv6_origin, dns_zone, dns_root_domain) -%}
    {{- append_records_for_host(records, zone, host, 'ethernet', 0, zone.name, host.name, reverse_ipv4_origin, link_local_ipv6_origin, dns_root_domain) }}
    {{- append_records_for_aliases(records, host, dns_zone, dns_root_domain) }}
{%- endmacro -%}

{%- macro append_wifi_records(records, zone, host, reverse_ipv4_origin, link_local_ipv6_origin, dns_zone, dns_root_domain) -%}
    {{- append_records_for_host(records, zone, host, 'wifi', 256, zone.name, host.name, reverse_ipv4_origin, link_local_ipv6_origin, dns_root_domain) }}
    {{- append_records_for_aliases(records, host, dns_zone, dns_root_domain) }}
{%- endmacro -%}

{%- macro append_ethernet_and_wifi_records(records, zone, host, reverse_ipv4_ethernet_origin, reverse_ipv4_wifi_origin, link_local_ipv6_origin, dns_root_domain) -%}
    {%- set forward_origin = host.name + '.' + zone.name -%}
    {{- append_records_for_host(records, zone, host, 'ethernet', 0, forward_origin, 'ethernet', reverse_ipv4_ethernet_origin, link_local_ipv6_origin, dns_root_domain) }}
    {{- append_records_for_host_origin_aliases(records, zone, host, 'ethernet', dns_root_domain) }}
    {{- append_records_for_host(records, zone, host, 'wifi', 256, forward_origin, 'wifi', reverse_ipv4_wifi_origin, link_local_ipv6_origin, dns_root_domain) }}
    {{- append_records_for_host_origin_aliases(records, zone, host, 'wifi', dns_root_domain) }}
{%- endmacro -%}

{%- macro append_records_for_zone(records, zone, dns_zone, dns_root_domain) -%}
    {%- set link_local_ipv6_origin = ('fe80::' | ansible.utils.ipaddr('revdns'))[32:72] -%}

    {%- set zone_octets = ((zone.ipv4_subnet | ansible.utils.ipaddr('prefix')) / 8) | round(0, 'ceil') | int -%}

    {%- set reverse_ipv4_ethernet_origin_octets = (zone.ipv4_subnet | ansible.utils.ipaddr('network')).split('.') -%}
    {%- set reverse_ipv4_ethernet_origin = reverse_ipv4_ethernet_origin_octets[:zone_octets] | reverse | join('.') + '.in-addr.arpa' -%}

    {%- set reverse_ipv4_wifi_origin_octets = (zone.ipv4_subnet | ansible.utils.ipaddr(256) | ansible.utils.ipaddr('address')).split('.') -%}
    {%- set reverse_ipv4_wifi_origin = reverse_ipv4_wifi_origin_octets[:zone_octets] | reverse | join('.') + '.in-addr.arpa' -%}

    {%- set hosts_with_ethernet_and_wifi = zone.hosts | selectattr('ethernet', 'defined') | selectattr('wifi', 'defined') -%}

    {%- for host in zone.hosts | difference(hosts_with_ethernet_and_wifi) | selectattr('ethernet', 'defined') -%}
        {{- append_ethernet_records(records, zone, host, reverse_ipv4_ethernet_origin, link_local_ipv6_origin, dns_zone, dns_root_domain) }}
    {%- endfor -%}

    {%- for host in zone.hosts | difference(hosts_with_ethernet_and_wifi) | selectattr('wifi', 'defined') -%}
        {{- append_wifi_records(records, zone, host, reverse_ipv4_wifi_origin, link_local_ipv6_origin, dns_zone, dns_root_domain) }}
    {%- endfor -%}

    {%- for host in hosts_with_ethernet_and_wifi -%}
        {{- append_ethernet_and_wifi_records(records, zone, host, reverse_ipv4_ethernet_origin, reverse_ipv4_wifi_origin, link_local_ipv6_origin, dns_root_domain) }}
    {%- endfor -%}
{%- endmacro -%}
